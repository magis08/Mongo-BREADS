<%- include('partials/header.ejs') %>

  <div class="card custom-card">
    <div class="card-header text-center">
      <h1>MongoDB Breads (Browse, Read, Edit, Add, Delete, Sorting)</h1>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-3 mb-3">
          <div class="input-group">
            <span class="input-group-text">show</span>
            <select class="form-control text-center" id="limit">
              <option value="5">5</option>
              <option value="10">10</option>
              <option value="0">All</option>
            </select>
            <span class="input-group-text">entries</span>
          </div>
        </div>
        <div class="col-md-9 mb-3">
          <div class="input-group">
            <input type="text" class="form-control" id="search" placeholder="Search">
            <button class="btn btn-secondary" id="searchBtn"><i class="fa-solid fa-magnifying-glass"></i></button>
            <button class="btn btn-warning" id="resetBtn"><i class="fa-solid fa-rotate"></i></button>
          </div>
        </div>
      </div>
      <div class="table-responsive">
        <table class="table table-striped">
          <thead>
            <tr>
              <th scope="col" class="col-1 align-middle px-2">
                <span>No.</span>
              </th>
              <th scope="col" class="col-4 col-md-3 align-middle px-2" id="sortName">
                <span><i class="fa-solid fa-sort me-2"></i>Name</span>
              </th>
              <th scope="col" class="col-4 col-md-3 align-middle px-2" id="sortPhone">
                <span><i class="fa-solid fa-sort me-2"></i>Phone</span>
              </th>
              <th scope="col" class="col-3 align-middle px-2">
                <span>Actions</span>
              </th>
            </tr>
          </thead>
          <tbody id="userList">
            <!-- Users will be dynamically added here via JavaScript -->
          </tbody>
        </table>
      </div>

      <div class="card-footer d-flex flex-column flex-md-row justify-content-between align-items-center">
        <button type="button" class="btn btn-primary mb-2 mb-md-0" id="addBtn">
          <i class="fa-regular fa-plus"></i>
        </button>
        <div class="d-flex flex-column flex-md-row align-items-center">
          <div class="me-3 mb-2 mb-md-0 text-center text-md-start" id="pagination"></div>
          <nav aria-label="Page navigation">
            <ul class="pagination mb-0 justify-content-center justify-content-md-start" id="pagination">
              <!-- Pagination -->
            </ul>
          </nav>
        </div>
      </div>

      <!-- Modal for Add User -->
      <div class="modal" tabindex="-1" id="addModal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Add User</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="addForm">
                <div class="mb-3">
                  <label for="addName" class="form-label">Name</label>
                  <input type="text" class="form-control" id="addName" required>
                </div>
                <div class="mb-3">
                  <label for="addPhone" class="form-label">Phone</label>
                  <input type="text" class="form-control" id="addPhone" required>
                </div>
                <button type="submit" class="btn btn-primary">Add</button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Modal for Edit User -->
      <div class="modal" tabindex="-1" id="editModal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Edit User</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="editForm">
                <div class="mb-3">
                  <label for="editName" class="form-label">Name</label>
                  <input type="text" class="form-control" id="editName" required>
                </div>
                <div class="mb-3">
                  <label for="editPhone" class="form-label">Phone</label>
                  <input type="text" class="form-control" id="editPhone" required>
                </div>
                <button type="submit" class="btn btn-primary">Update</button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Modal for Confirm Deletion -->
      <div class="modal" tabindex="-1" id="deleteModal">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Confirm Deletion</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <p>Are you sure you want to delete this user?</p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
          </div>
        </div>
      </div>


      <%- include('partials/footer.ejs') %>

        <script>
          document.addEventListener('DOMContentLoaded', () => {
            let currentSearchQuery = '';
            let sortBy = '_id';  // Default sort by 'name'
            let sortOrder = 'asc';  // Default order is ascending
            let currentLimit = 5;  // Default limit

            // Function to fetch users and display them with pagination and sorting
            function fetchUsers(page = 1, searchQuery = '', sortBy = 'name', sortOrder = 'asc', limit = 5) {
              const userList = document.getElementById('userList');
              const pagination = document.getElementById('pagination');

              if (!userList) {
                console.error('Element userList tidak ditemukan!');
                return;
              }

              userList.innerHTML = ''; // Clear previous user list

              // Fetch users from API with search query, pagination, sorting, and limit
              fetch(`/api/users?page=${page}&search=${searchQuery}&sortBy=${sortBy}&sortOrder=${sortOrder}&limit=${limit}`)
                .then(response => response.json())
                .then(data => {
                  // Clear the current table
                  userList.innerHTML = '';

                  // If no users are found
                  if (!data || !data.users || data.users.length === 0) {
                    userList.innerHTML = '<tr><td colspan="4">No users found.</td></tr>';
                    return;
                  }

                  // Populate the user table with data
                  data.users.forEach((user, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                    <th scope="row">${(page - 1) * limit + index + 1}</th>
                    <td>${user.name}</td>
                    <td>${user.phone}</td>
                    <td>
                      <button class="btn btn-warning editBtn" data-id="${user._id}"><i class="fa-solid fa-pencil"></i></button>
                      <button class="btn btn-danger deleteBtn" data-id="${user._id}"><i class="fa-solid fa-trash-can"></i></button>
                    </td>
                  `;
                    userList.appendChild(row);
                  });

                  // Add pagination buttons dynamically
                  if (pagination) {
                    pagination.innerHTML = ''; // Clear existing pagination
                    for (let i = 1; i <= data.totalPages; i++) {
                      const pageLink = document.createElement('a');
                      pageLink.href = '#';
                      pageLink.textContent = i;
                      pageLink.className = 'btn btn-light mx-1';
                      pageLink.onclick = (event) => {
                        event.preventDefault();
                        fetchUsers(i, searchQuery, sortBy, sortOrder, limit);  // Fetch users for the corresponding page with search query and sorting
                      };
                      pagination.appendChild(pageLink);
                    }
                  }
                })
                .catch(error => console.error('Error fetching users:', error));
            }

            // Handle limit selection
            document.getElementById('limit').addEventListener('change', (e) => {
              const selectedLimit = e.target.value;
              currentLimit = (selectedLimit === '0') ? 1000 : parseInt(selectedLimit);  // Use a large number for 'All'
              fetchUsers(1, currentSearchQuery, sortBy, sortOrder, currentLimit);
            });

            // Show Add User Modal
            document.getElementById('addBtn').addEventListener('click', () => {
              const modal = new bootstrap.Modal(document.getElementById('addModal'));
              modal.show();

              document.getElementById('addForm').onsubmit = (e) => {
                e.preventDefault();

                const name = document.getElementById('addName').value;
                const phone = document.getElementById('addPhone').value;

                fetch('/api/users', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ name, phone })
                })
                  .then(response => response.json())
                  .then(() => {
                    fetchUsers(1, '', sortBy, sortOrder, currentLimit);  // Refresh the user list after adding a new user
                    modal.hide();  // Close the modal
                    document.getElementById('addName').value = '';
                    document.getElementById('addPhone').value = '';
                  })
                  .catch(error => console.error('Error adding user:', error));
              };
            });

            // Edit user
            document.getElementById('userList').addEventListener('click', (event) => {
              if (event.target.classList.contains('editBtn')) {
                const userId = event.target.getAttribute('data-id');

                fetch(`/api/users/${userId}`)
                  .then(response => response.json())
                  .then(user => {
                    document.getElementById('editName').value = user.name;
                    document.getElementById('editPhone').value = user.phone;

                    const modal = new bootstrap.Modal(document.getElementById('editModal'));
                    modal.show();

                    document.getElementById('editForm').onsubmit = (e) => {
                      e.preventDefault();

                      const updatedName = document.getElementById('editName').value;
                      const updatedPhone = document.getElementById('editPhone').value;

                      fetch(`/api/users/${userId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ name: updatedName, phone: updatedPhone })
                      })
                        .then(() => {
                          fetchUsers(1, currentSearchQuery, sortBy, sortOrder, currentLimit);  // Refresh user list after update
                          modal.hide();  // Close the modal
                        })
                        .catch(error => console.error('Error updating user:', error));
                    };
                  })
                  .catch(error => console.error('Error fetching user data:', error));
              }
            });

            // Show Delete Confirmation Modal
            let currentUserId = '';
            document.getElementById('userList').addEventListener('click', (event) => {
              if (event.target.classList.contains('deleteBtn')) {
                const userId = event.target.getAttribute('data-id');
                currentUserId = userId;  // Store the selected user ID

                const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
                modal.show();
              }
            });

            // Confirm Delete user
            document.getElementById('confirmDeleteBtn').addEventListener('click', () => {
              if (currentUserId) {
                fetch(`/api/users/${currentUserId}`, { method: 'DELETE' })
                  .then(() => {
                    fetchUsers(1, currentSearchQuery, sortBy, sortOrder, currentLimit);  // Refresh the list after deleting
                    const modal = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));
                    modal.hide();  // Close the delete modal
                  })
                  .catch(error => console.error('Error deleting user:', error));
              }
            });

            // Handle search functionality
            document.getElementById('searchBtn').addEventListener('click', () => {
              const searchQuery = document.getElementById('search').value.trim();
              currentSearchQuery = searchQuery;  // Update the search query
              fetchUsers(1, searchQuery, sortBy, sortOrder, currentLimit);  // Fetch the first page of users with the search query and sorting
            });

            // Handle reset functionality
            document.getElementById('resetBtn').addEventListener('click', () => {
              document.getElementById('search').value = '';  // Clear search input
              currentSearchQuery = '';  // Reset search query
              fetchUsers(1, '', sortBy, sortOrder, currentLimit);  // Fetch all users (reset search)
            });

            // Handle sorting functionality for Name and Phone columns
            document.getElementById('sortName').addEventListener('click', () => {
              sortBy = 'name';
              sortOrder = (sortOrder === 'asc') ? 'desc' : 'asc';  // Toggle sorting order
              fetchUsers(1, currentSearchQuery, sortBy, sortOrder, currentLimit);  // Fetch sorted users
            });

            document.getElementById('sortPhone').addEventListener('click', () => {
              sortBy = 'phone';
              sortOrder = (sortOrder === 'asc') ? 'desc' : 'asc';  // Toggle sorting order
              fetchUsers(1, currentSearchQuery, sortBy, sortOrder, currentLimit);  // Fetch sorted users
            });

            // Initial load of users for the first page
            fetchUsers(1, '', sortBy, sortOrder, currentLimit);
          });

        </script>